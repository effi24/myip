{"ast":null,"code":"/* eslint-env browser */\nimport pEvent from 'p-event';\nimport isIp from 'is-ip';\n\nconst getIp = async function () {\n  let {\n    isSecondTry = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  try {\n    const peerConnection = new RTCPeerConnection({\n      iceServers: []\n    });\n    peerConnection.createDataChannel('');\n    peerConnection.createOffer(peerConnection.setLocalDescription.bind(peerConnection), () => {});\n    const {\n      candidate\n    } = await pEvent(peerConnection, 'icecandidate', {\n      timeout: 10_000\n    });\n    peerConnection.close();\n\n    if (!(candidate && candidate.candidate)) {\n      return;\n    }\n\n    const result = candidate.candidate.split(' ')[4];\n\n    if (!result.endsWith('.local')) {\n      return result;\n    }\n\n    if (isSecondTry) {\n      return;\n    }\n\n    const inputDevices = await navigator.mediaDevices.enumerateDevices();\n    const inputDeviceTypes = new Set(inputDevices.map(_ref => {\n      let {\n        kind\n      } = _ref;\n      return kind;\n    }));\n    const constraints = {};\n\n    if (inputDeviceTypes.has('audioinput')) {\n      constraints.audio = true;\n    } else if (inputDeviceTypes.has('videoinput')) {\n      constraints.video = true;\n    } else {\n      return;\n    }\n\n    const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n\n    for (const track of mediaStream.getTracks()) {\n      track.stop();\n    }\n\n    return await getIp({\n      isSecondTry: true\n    });\n  } catch {}\n};\n\nexport async function internalIpV6() {\n  const result = await getIp();\n\n  if (isIp.v6(result)) {\n    return result;\n  }\n}\nexport async function internalIpV4() {\n  const result = await getIp();\n\n  if (isIp.v4(result)) {\n    return result;\n  }\n}\nexport function internalIpV6Sync() {\n  return undefined;\n}\nexport function internalIpV4Sync() {\n  return undefined;\n}","map":{"version":3,"names":["pEvent","isIp","getIp","isSecondTry","peerConnection","RTCPeerConnection","iceServers","createDataChannel","createOffer","setLocalDescription","bind","candidate","timeout","close","result","split","endsWith","inputDevices","navigator","mediaDevices","enumerateDevices","inputDeviceTypes","Set","map","kind","constraints","has","audio","video","mediaStream","getUserMedia","track","getTracks","stop","internalIpV6","v6","internalIpV4","v4","internalIpV6Sync","undefined","internalIpV4Sync"],"sources":["/Users/effiphil/Desktop/myip/node_modules/internal-ip/browser.js"],"sourcesContent":["/* eslint-env browser */\nimport pEvent from 'p-event';\nimport isIp from 'is-ip';\n\nconst getIp = async ({isSecondTry = false} = {}) => {\n\ttry {\n\t\tconst peerConnection = new RTCPeerConnection({iceServers: []});\n\n\t\tpeerConnection.createDataChannel('');\n\t\tpeerConnection.createOffer(peerConnection.setLocalDescription.bind(peerConnection), () => {});\n\n\t\tconst {candidate} = await pEvent(peerConnection, 'icecandidate', {\n\t\t\ttimeout: 10_000,\n\t\t});\n\n\t\tpeerConnection.close();\n\n\t\tif (!(candidate && candidate.candidate)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = candidate.candidate.split(' ')[4];\n\t\tif (!result.endsWith('.local')) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (isSecondTry) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inputDevices = await navigator.mediaDevices.enumerateDevices();\n\t\tconst inputDeviceTypes = new Set(inputDevices.map(({kind}) => kind));\n\n\t\tconst constraints = {};\n\t\tif (inputDeviceTypes.has('audioinput')) {\n\t\t\tconstraints.audio = true;\n\t\t} else if (inputDeviceTypes.has('videoinput')) {\n\t\t\tconstraints.video = true;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\tfor (const track of mediaStream.getTracks()) {\n\t\t\ttrack.stop();\n\t\t}\n\n\t\treturn await getIp({isSecondTry: true});\n\t} catch {}\n};\n\nexport async function internalIpV6() {\n\tconst result = await getIp();\n\tif (isIp.v6(result)) {\n\t\treturn result;\n\t}\n}\n\nexport async function internalIpV4() {\n\tconst result = await getIp();\n\tif (isIp.v4(result)) {\n\t\treturn result;\n\t}\n}\n\nexport function internalIpV6Sync() {\n\treturn undefined;\n}\n\nexport function internalIpV4Sync() {\n\treturn undefined;\n}\n"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,SAAnB;AACA,OAAOC,IAAP,MAAiB,OAAjB;;AAEA,MAAMC,KAAK,GAAG,kBAAsC;EAAA,IAA/B;IAACC,WAAW,GAAG;EAAf,CAA+B,uEAAP,EAAO;;EACnD,IAAI;IACH,MAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAsB;MAACC,UAAU,EAAE;IAAb,CAAtB,CAAvB;IAEAF,cAAc,CAACG,iBAAf,CAAiC,EAAjC;IACAH,cAAc,CAACI,WAAf,CAA2BJ,cAAc,CAACK,mBAAf,CAAmCC,IAAnC,CAAwCN,cAAxC,CAA3B,EAAoF,MAAM,CAAE,CAA5F;IAEA,MAAM;MAACO;IAAD,IAAc,MAAMX,MAAM,CAACI,cAAD,EAAiB,cAAjB,EAAiC;MAChEQ,OAAO,EAAE;IADuD,CAAjC,CAAhC;IAIAR,cAAc,CAACS,KAAf;;IAEA,IAAI,EAAEF,SAAS,IAAIA,SAAS,CAACA,SAAzB,CAAJ,EAAyC;MACxC;IACA;;IAED,MAAMG,MAAM,GAAGH,SAAS,CAACA,SAAV,CAAoBI,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,CAAf;;IACA,IAAI,CAACD,MAAM,CAACE,QAAP,CAAgB,QAAhB,CAAL,EAAgC;MAC/B,OAAOF,MAAP;IACA;;IAED,IAAIX,WAAJ,EAAiB;MAChB;IACA;;IAED,MAAMc,YAAY,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,gBAAvB,EAA3B;IACA,MAAMC,gBAAgB,GAAG,IAAIC,GAAJ,CAAQL,YAAY,CAACM,GAAb,CAAiB;MAAA,IAAC;QAACC;MAAD,CAAD;MAAA,OAAYA,IAAZ;IAAA,CAAjB,CAAR,CAAzB;IAEA,MAAMC,WAAW,GAAG,EAApB;;IACA,IAAIJ,gBAAgB,CAACK,GAAjB,CAAqB,YAArB,CAAJ,EAAwC;MACvCD,WAAW,CAACE,KAAZ,GAAoB,IAApB;IACA,CAFD,MAEO,IAAIN,gBAAgB,CAACK,GAAjB,CAAqB,YAArB,CAAJ,EAAwC;MAC9CD,WAAW,CAACG,KAAZ,GAAoB,IAApB;IACA,CAFM,MAEA;MACN;IACA;;IAED,MAAMC,WAAW,GAAG,MAAMX,SAAS,CAACC,YAAV,CAAuBW,YAAvB,CAAoCL,WAApC,CAA1B;;IACA,KAAK,MAAMM,KAAX,IAAoBF,WAAW,CAACG,SAAZ,EAApB,EAA6C;MAC5CD,KAAK,CAACE,IAAN;IACA;;IAED,OAAO,MAAM/B,KAAK,CAAC;MAACC,WAAW,EAAE;IAAd,CAAD,CAAlB;EACA,CA3CD,CA2CE,MAAM,CAAE;AACV,CA7CD;;AA+CA,OAAO,eAAe+B,YAAf,GAA8B;EACpC,MAAMpB,MAAM,GAAG,MAAMZ,KAAK,EAA1B;;EACA,IAAID,IAAI,CAACkC,EAAL,CAAQrB,MAAR,CAAJ,EAAqB;IACpB,OAAOA,MAAP;EACA;AACD;AAED,OAAO,eAAesB,YAAf,GAA8B;EACpC,MAAMtB,MAAM,GAAG,MAAMZ,KAAK,EAA1B;;EACA,IAAID,IAAI,CAACoC,EAAL,CAAQvB,MAAR,CAAJ,EAAqB;IACpB,OAAOA,MAAP;EACA;AACD;AAED,OAAO,SAASwB,gBAAT,GAA4B;EAClC,OAAOC,SAAP;AACA;AAED,OAAO,SAASC,gBAAT,GAA4B;EAClC,OAAOD,SAAP;AACA"},"metadata":{},"sourceType":"module"}